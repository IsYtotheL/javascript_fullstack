// 类型转换

// 要明确知道，在js中类型转化只有三种情况，分别是：
// 1.转换为布尔值
// 2.转换为数字
// 3.转换为字符串
//类型转换表
//https://www.cnblogs.com/abc-x/p/10780821.html


// 转Boolean的情况，除了undefined,null,false,NaN,'',0,-0,其他所有的值都转为true,包括对象


// 对象转为原始类型

// 对象在转换类型时，会调用内置的[[ToPrimitive]]函数，对于该函数来说，转换类型的算法逻辑如下：
//   - 如果已经是原始类型，那就不用转换
//   - 调用 X.valueof(),如果转换为基础类型，就返回转换的值
//   - 调用 X.tostring(),如果转换为基础类型，就返回转换的值
//   - 如果都没有返回原始类型，就会报错


let a = {
  valueOf() {
    return 0
  },
  toString() {
    return '1'
  },
  [Symbol.toPrimitive] () {
    return '2'
  }
}
// 在加法运算中，只要有一方是字符串，另外一方也会转字符串
// 如果一方不是数字也不是字符串，会转换成数字或字符串相加
// 四则运算的加法中的特点：
// 1.运算中存在一方为字符串，那么就会把其他地方也转化为字符串进行相加
// 2.如果一方不是数字也不是字符串，会转它换成数字或字符串相加
//1 + a //3
1 + '1' // '11'
true + true //2
4 + [1,2,3] //'41,2,3'
[1,2,3] + 4 //‘1，2，34’

'a' + + 'b' //aNaN  相当于'a' + (+ 'b')

//除了加法运算符，其他的只要有一方是数字，另外一方就会被转换为数字
 4 * '3' //12
 4 * [] //0
 4 * [1,2] //NaN

 比较运算
 1.如果是对象，就通过 toPrimitive 转换对象
 2.如果是字符串，就通过 unicode字符索引来比较
 let foo = {
   valueOf() {
     return 0  //转数字
   },
   toString() {
     return '1' //转字符串
   }
 }
foo > -1  // true  把对象转换为数字


