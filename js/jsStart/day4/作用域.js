// js作用域:就是代码名字(变量)在某个范围内起作用和效果 
//目的是为了提高程序的可靠性,更重要的是减少命名冲突
//  2.js的作用域(es6)之前:全局作用域  局部作用域
// 3.全局作用域:整个script标签 或者是一个单独的js文件
// 在全局作用域下声明的变量叫做全局变量(在函数外部定义的变量)
// 全局变量在代码的任何位置都可以使用
// 在全局作用域下var声明的变量 是全局变量
// 特殊情况下,在函数内不使用var 声明的变量也是全局变量(不建议使用)
var num = 10;
console.log(num) //10
// 4.局部作用域(函数作用域)在函数内部就是局部作用域
// 这个代码的名字只能在函数内部起效果和作用
// 局部变量只能在该函数内部使用
// 在函数内部var 声明的变量是局部变量
// 函数的形参实际上就是局部变量
function fn() {
  //局部作用域
  
  var num = 30;
  console.log(num) //30
}
fn();

// function jb() {
//   num = 40;
//   console.log(num)
// }
// jb()



// 全局变量和局部变量的区别
// 全局变量:在任何一个地方都可以使用,只有在浏览器关闭时才会被销毁,因此比较占内存
// 局部变量:只在函数内部使用,当其所在的代码块被执行时,会被初始化;
  //当代码块运行结束后,就会被销毁,因此更节省内存空间


  // js中没有块级作用域  js 的作用域:全局作用域 局部作用域  现阶段我们js没有块级作用域
  // 我们js也是在es6 的时候新增的块级作用域
  // 块级作用域 {} if {} for {}
  // java
  // if(xx) {
    //int num = 10;
  //}
  // 外面的是不能调用num的
  if(3<5) {
    var num = 20;
  }
  console.log(num) //20



  // 作用域链
  // 只要是代码,就至少有一个作用域
  // 写在函数内部的局部作用域
  // 如果函数中还有函数,那么在这个作用域中就又可以诞生一个作用域
  // 根据在内部函数可以访问外部函数变量的这种机制,
  //用链式查找决定哪些数据能被内部函数访问,就称为作用域链

  var num1 = 100;
  function fn1() { //外部函数
    var num1 = 200;
    function fun() { //内部函数
      console.log(num1); //200
    }
    fun()
  }
  var num1 = 300
  fn1()

  // 作用域链:内部函数访问外部函数的变量,采取的是链式查找的方式来决定取哪个值 这种结构我们称作作用域链
